{"version":3,"sources":["contexts/simplify-context.js","contexts/visualization-context.js","digestable/clustering/kmeans.js","digestable/clustering/clusterGap.js","digestable/relations/correlation.js","digestable/relations/utils.js","digestable/relations/cramersV.js","digestable/relations/categoricalRegression.js","digestable/digestable.js","digestable/clustering/clusterQuantiles.js","digestable/clustering/groupCategories.js","components/table-wrapper/table-wrapper.js","hooks/use-scroll-hook.js","components/controls/controlPanel.js","components/controls/simplifyControls.js","components/controls/visualizationControls.js","app.js","index.js"],"names":["methods","name","type","transform","initialState","apply","columnType","method","amount","transformBase","unique","rows","reducer","state","action","Math","min","Error","SimplifyContext","createContext","SimplifyProvider","children","useReducer","dispatch","Provider","value","modes","categoryScalingOptions","mode","showLinks","categoryScaling","VisualizationContext","VisualizationProvider","calcMeanCentroid","dataSet","start","end","features","length","n","mean","i","push","j","getRandomCentroidsNaiveSharding","dataset","k","numSamples","step","floor","centroids","getRandomCentroids","index","max","centroidsIndex","random","indexOf","centroid","compareCentroids","a","b","shouldStop","oldCentroids","iterations","sameCount","getDistanceSQ","diffs","reduce","r","e","getLabels","labels","c","points","indeces","closestCentroidIndex","prevDistance","distance","getPointsMean","pointList","totalPoints","means","point","val","recalculateCentroids","newCentroid","newCentroidList","centroidGroup","correlation","d1","d2","ss","isNaN","getUniqueValues","d","Array","from","values","add","Set","cramersV","dimension1","dimension2","categories1","categories2","chi2","categoryCounts","counts","counts1","counts2","c1","forEach","c2","v1","v2","observed","expected","map","o","pow","chiSquared","k1","k2","sqrt","categoricalRegression","categorical","numeric","nonNull","v","validCat","validNum","categories","cats","slice","x","category","lr","shaman","LinearRegression","algorithm","p","train","err","console","log","predict","digestable","table","d3","linkSvg","allData","data","columns","relations","clustering","applySimplification","simplificationMethod","simplificationAmount","simplificationRows","visualizationMode","missingValues","isMissing","includes","dispatcher","selection","each","inputData","this","selectAll","join","enter","append","attr","column","uniqueValues","validValues","filter","numbers","sort","isId","extent","maxDigits","significantDigits","getCounts","clearSorting","clearClustering","initialIndex","isCluster","cluster","pinned","expanded","createData","processData","sortTable","drawTable","Object","entries","count","log10","String","split","n1","n2","abs","clusterColumn","find","sortData","maxCount","clusters","transformValues","base","valueScale","domain","range","removeNull","nullIndex","nullCluster","applyNull","concat","scale","clusterQuantiles","reverse","useNaiveSharding","converged","kmeans","numRows","gaps","gap","unshift","clusterGap","clusterNumeric","groupCategories","clusterCategorical","size","row","valid","median","q1","q2","sortColumn","px","paddingX","py","paddingY","showSortButtons","info","th","select","div","nameDiv","text","on","evt","sortByColumn","style","clusterByColumn","call","html","classed","width","node","clientWidth","svg","xScale","rangeRound","bins","bin","yScale","rect","x0","x1","colorScale","bandwidth","drawHeader","top","others","s","topString","othersString","expandedData","insert","maxSize","td","valueDiv","w2","w1","height","source","target","drawBody","applyVisualizationMode","clientHeight","highlight","drawLinks","column1","column2","magnitude","offsetWidth","aspect","offset","getBoundingClientRect","nodes","left","right","pos","x2","y","xi","yi","line","curve","opacityScale","widthScale","_","arguments","updateLinks","TableWrapper","useContext","simplifyDispatch","divRef","useRef","digestableRef","onScroll","callback","scrollType","ticking","current","scrollLeft","window","requestAnimationFrame","scrollTop","useScrollHook","useEffect","datum","ref","overflow","Header","Card","Body","ControlPanel","title","Stack","Group","Form","Label","Check","Select","Range","Control","SimplifyControls","label","id","checked","disabled","onChange","FloatingLabel","VisualizationControls","visualizationDispatch","option","Brand","Navbar","datasets","url","App","useState","setDataset","setData","loading","setLoading","loadData","csvData","bg","variant","className","src","alt","as","Row","Col","sm","accept","file","files","URL","createObjectURL","Container","fluid","xs","Spinner","animation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e400500.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst methods = [\n  { name: 'quantiles', type: 'rows' },\n  { name: 'kmeans', type: 'rows' },\n  { name: 'gap', type: 'rows', transform: true }\n//  { name: 'threshold', type: 'amount' }\n];\n\nconst initialState = {\n  apply: false,\n  columnType: 'numeric',\n  methods: methods,\n  method: methods[0],\n  amount: 0.5,\n  transformBase: 1,\n  unique: 0,\n  rows: 10 \n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setApply': \n      return {\n        ...state,\n        apply: action.apply\n      };\n\n    case 'setMethod':\n      return {\n        ...state,\n        method: action.method\n      };\n\n    case 'setAmount':\n      return {\n        ...state,\n        amount: action.amount\n      };\n\n    case 'setTransformBase':\n      return {\n        ...state,\n        transformBase: action.transformBase\n      };\n\n    case 'setColumnInfo': \n      return {\n        ...state,\n        columnType: action.columnType,\n        unique: action.unique,\n        rows: Math.min(state.rows, action.unique)\n      }\n\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.rows\n      }\n\n    default: \n      throw new Error('Invalid simplify context action: ' + action.type);\n  }\n}\n\nexport const SimplifyContext = createContext(initialState);\n\nexport const SimplifyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n \n  return (\n    <SimplifyContext.Provider value={ [state, dispatch] }>\n      { children }\n    </SimplifyContext.Provider>\n  )\n} \n","import React, { createContext, useReducer } from 'react';\n\nconst modes = [\n  'text',\n  'visualizations',\n  'both',\n  'interactive'\n];\n\nconst categoryScalingOptions = [\n  'row',\n  'column'\n];\n\nconst initialState = {\n  modes: modes,\n  mode: modes[0],\n  showLinks: false,\n  categoryScalingOptions: categoryScalingOptions,\n  categoryScaling: categoryScalingOptions[0]\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setMode': \n      return {\n        ...state,\n        mode: action.mode\n      };\n\n    case 'setShowLinks':\n      return {\n        ...state,\n        showLinks: action.showLinks\n      }\n\n    case 'setCategoryScaling':\n      return {\n        ...state,\n        categoryScaling: action.categoryScaling\n      }\n\n    default: \n      throw new Error('Invalid visualization context action: ' + action.type);\n  }\n}\n\nexport const VisualizationContext = createContext(initialState);\n\nexport const VisualizationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n \n  return (\n    <VisualizationContext.Provider value={ [state, dispatch] }>\n      { children }\n    </VisualizationContext.Provider>\n  )\n} \n","// Adapted from https://medium.com/geekculture/implementing-k-means-clustering-from-scratch-in-javascript-13d71fbcb31e\n\nconst MAX_ITERATIONS = 50;\n\nfunction randomBetween(min, max) {\n  return Math.floor(\n    Math.random() * (max - min) + min\n  );\n}\n\nfunction calcMeanCentroid(dataSet, start, end) {\n  const features = dataSet[0].length;\n  const n = end - start;\n  let mean = [];\n  for (let i = 0; i < features; i++) {\n    mean.push(0);\n  }\n  for (let i = start; i < end; i++) {\n    for (let j = 0; j < features; j++) {\n      mean[j] = mean[j] + dataSet[i][j] / n;\n    }\n  }\n  return mean;\n}\n\nfunction getRandomCentroidsNaiveSharding(dataset, k) {\n  // implementation of a variation of naive sharding centroid initialization method\n  // (not using sums or sorting, just dividing into k shards and calc mean)\n  // https://www.kdnuggets.com/2017/03/naive-sharding-centroid-initialization-method.html\n  const numSamples = dataset.length;\n  // Divide dataset into k shards:\n  const step = Math.floor(numSamples / k);\n  const centroids = [];\n  for (let i = 0; i < k; i++) {\n    const start = step * i;\n    let end = step * (i + 1);\n    if (i + 1 === k) {\n      end = numSamples;\n    }\n    centroids.push(calcMeanCentroid(dataset, start, end));\n  }\n  return centroids;\n}\n\nfunction getRandomCentroids(dataset, k) {\n  // selects random points as centroids from the dataset\n  const numSamples = dataset.length;\n  const centroidsIndex = [];\n  let index;\n  while (centroidsIndex.length < k) {\n    index = randomBetween(0, numSamples);\n    if (centroidsIndex.indexOf(index) === -1) {\n      centroidsIndex.push(index);\n    }\n  }\n  const centroids = [];\n  for (let i = 0; i < centroidsIndex.length; i++) {\n    const centroid = [...dataset[centroidsIndex[i]]];\n    centroids.push(centroid);\n  }\n  return centroids;\n}\n\nfunction compareCentroids(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction shouldStop(oldCentroids, centroids, iterations) {\n  if (iterations > MAX_ITERATIONS) {\n    return true;\n  }\n  if (!oldCentroids || !oldCentroids.length) {\n    return false;\n  }\n  let sameCount = true;\n  for (let i = 0; i < centroids.length; i++) {\n    if (!compareCentroids(centroids[i], oldCentroids[i])) {\n      sameCount = false;\n    }\n  }\n  return sameCount;\n}\n\n// Calculate Squared Euclidean Distance\nfunction getDistanceSQ(a, b) {\n  const diffs = [];\n  for (let i = 0; i < a.length; i++) {\n    diffs.push(a[i] - b[i]);\n  }\n  return diffs.reduce((r, e) => (r + (e * e)), 0);\n}\n\n// Returns a label for each piece of data in the dataset. \nfunction getLabels(dataSet, centroids) {\n  // prep data structure:\n  const labels = {};\n  for (let c = 0; c < centroids.length; c++) {\n    labels[c] = {\n      points: [],\n      indeces: [],\n      centroid: centroids[c],\n    };\n  }\n  // For each element in the dataset, choose the closest centroid. \n  // Make that centroid the element's label.\n  for (let i = 0; i < dataSet.length; i++) {\n    const a = dataSet[i];\n    let closestCentroid, closestCentroidIndex, prevDistance;\n    for (let j = 0; j < centroids.length; j++) {\n      let centroid = centroids[j];\n      if (j === 0) {\n        closestCentroid = centroid;\n        closestCentroidIndex = j;\n        prevDistance = getDistanceSQ(a, closestCentroid);\n      } else {\n        // get distance:\n        const distance = getDistanceSQ(a, centroid);\n        if (distance < prevDistance) {\n          prevDistance = distance;\n          closestCentroid = centroid;\n          closestCentroidIndex = j;\n        }\n      }\n    }\n\n    labels[closestCentroidIndex].points.push(a);\n    labels[closestCentroidIndex].indeces.push(i);\n  }\n  return labels;\n}\n\nfunction getPointsMean(pointList) {\n  const totalPoints = pointList.length;\n  const means = [];\n  for (let j = 0; j < pointList[0].length; j++) {\n    means.push(0);\n  }\n  for (let i = 0; i < pointList.length; i++) {\n    const point = pointList[i];\n    for (let j = 0; j < point.length; j++) {\n      const val = point[j];\n      means[j] = means[j] + val / totalPoints;\n    }\n  }\n  return means;\n}\n\nfunction recalculateCentroids(dataSet, labels, k) {\n  // Each centroid is the geometric mean of the points that\n  // have that centroid's label. Important: If a centroid is empty (no points have\n  // that centroid's label) you should randomly re-initialize it.\n  let newCentroid;\n  const newCentroidList = [];\n  for (const k in labels) {\n    const centroidGroup = labels[k];\n    if (centroidGroup.points.length > 0) {\n      // find mean:\n      newCentroid = getPointsMean(centroidGroup.points);\n    } else {\n      // get new random centroid\n      newCentroid = getRandomCentroids(dataSet, 1)[0];\n    }\n    newCentroidList.push(newCentroid);\n  }\n  return newCentroidList;\n}\n\nexport function kmeans(dataset, k, useNaiveSharding = true) {\n  if (dataset.length && dataset[0].length && dataset.length >= k) {\n    // Initialize book keeping variables\n    let iterations = 0;\n    let oldCentroids, labels, centroids;\n\n    // Initialize centroids randomly\n    if (useNaiveSharding) {\n      centroids = getRandomCentroidsNaiveSharding(dataset, k);\n    } else {\n      centroids = getRandomCentroids(dataset, k);\n    }\n\n    // Run the main k-means algorithm\n    while (!shouldStop(oldCentroids, centroids, iterations)) {\n      // Save old centroids for convergence test.\n      oldCentroids = [...centroids];\n      iterations++;\n\n      // Assign labels to each datapoint based on centroids\n      labels = getLabels(dataset, centroids);\n      centroids = recalculateCentroids(dataset, labels, k);\n    }\n\n    const clusters = [];\n    for (let i = 0; i < k; i++) {\n      clusters.push(labels[i]);\n    }\n    const results = {\n      clusters: clusters,\n      centroids: centroids,\n      iterations: iterations,\n      converged: iterations <= MAX_ITERATIONS,\n    };\n    return results;\n  } else {\n    throw new Error('Invalid dataset');\n  }\n}","import * as d3 from 'd3';\n\nexport const clusterGap = (values, numRows) => {\n  const gaps = d3.pairs(values).map((d, i) => ({ value: Math.abs(d[1] - d[0]), index: i }));\n\n  gaps.sort((a, b) => {\n    return a.value === b.value ? d3.ascending(a.index, b.index) : d3.descending(a.value, b.value);\n  });\n\n  const clusters = gaps.slice(0, numRows - 1).map(gap => gap.index);\n\n  clusters.sort(d3.ascending);\n  clusters.unshift(-1);\n  clusters.push(values.length - 1);\n  \n  return d3.pairs(clusters).map(d => d3.range(d[0] + 1, d[1] + 1));\n};","import * as ss from 'simple-statistics';\n\nexport const correlation = (d1, d2) => {\n  const r = ss.sampleCorrelation(d1, d2);\n\n  return isNaN(r) ? 0 : r;\n};","export const getUniqueValues = d => Array.from(d.reduce((values, value) => values.add(value), new Set()));","import * as ss from 'simple-statistics';\nimport { getUniqueValues } from './utils';\n\nconst chiSquared = (dimension1, categories1, dimension2, categories2) => {\n    const categoryCounts = values => {\n      return values.reduce((counts, value) => {\n        if (!counts[value]) counts[value] = 1;\n        else counts[value]++;\n        return counts;\n      }, {});\n    };\n  \n    // Get counts per dimension\n    const counts1 = categoryCounts(dimension1, categories1);\n    const counts2 = categoryCounts(dimension2, categories2);\n  \n    // Initialize object for value counts\n    const counts = categories1.reduce((counts, c1) => {\n      counts[c1] = {};\n  \n      categories2.forEach(c2 => {\n        counts[c1][c2] = 0;\n      });\n  \n      return counts;\n    }, {});\n  \n    // Get counts\n    dimension1.forEach((v1, i) => {\n      const v2 = dimension2[i];\n  \n      counts[v1][v2]++;\n    });\n  \n    // Get expected and observed values\n    const n = dimension1.length;\n    const observed = [];\n    const expected = [];\n  \n    categories1.forEach(c1 => {\n      categories2.forEach(c2 => {\n        observed.push(counts[c1][c2]);\n        expected.push(counts1[c1] * counts2[c2] /  n);\n      });\n    });\n  \n    // Compute chi squared\n    return ss.sumSimple(observed.map((o, i) => {\n      const e = expected[i];\n  \n      return Math.pow(o - e, 2) / e;\n    }));\n  }\n  \n  export const cramersV = (dimension1, dimension2) => {\n    const categories1 = getUniqueValues(dimension1);\n    const categories2 = getUniqueValues(dimension2);\n  \n    // XXX: What should be returned here?\n    if (categories1.length === 1 || categories2.length === 1) return 0;\n  \n    const chi2 = chiSquared(dimension1, categories1, dimension2, categories2);\n  \n    const n = dimension1.length;\n    const k1 = categories1.length;\n    const k2 = categories2.length;\n    const k = Math.min(k1, k2);\n  \n    if (k1 === 2 && k2 === 2) {\n      // Use phi\n  //    console.log(\"Phi: \", Math.sqrt(chi2 / n));\n      return Math.sqrt(chi2 / n);\n    }\n    else {\n      // Use Cramers V\n  //    console.log(\"V: \", Math.sqrt(chi2 / (n * (k - 1))));\n      return Math.sqrt(chi2 / (n * (k - 1)));\n    }\n  };","import shaman from 'shaman';\nimport { correlation } from './correlation';\nimport { getUniqueValues } from './utils';\n\nexport const categoricalRegression = (categorical, numeric) => {\n  // Remove nulls\n  const [validCat, validNum] = categorical.reduce((nonNull, v, i) => {\n    if (categorical[i] !== null && numeric[i] !== null) {\n      nonNull[0].push(categorical[i]);\n      nonNull[1].push(numeric[i]);\n    }\n\n    return nonNull;\n  }, [[], []]);\n\n  const categories = getUniqueValues(validCat);\n\n  // XXX: What should be returned here?\n  if (categories.length === 1) return 0;\n\n  // n - 1 dummy categories\n  const cats = categories.slice(0, -1);\n\n  // Setup multiple regression\n  const x = validCat.map(value => {\n    return [...cats.map(category => value === category ? 1 : 0)];\n  });\n\n  const lr = new shaman.LinearRegression(x, validNum, { algorithm: 'NormalEquation' });\n\n  const p = [];\n  lr.train(err => {\n    if (err) console.log(err);\n\n    x.forEach(x => p.push(lr.predict(x)));\n  });\n\n  return correlation(validNum, p);\n};","import * as d3 from 'd3';\nimport { clusterQuantiles, kmeans, clusterGap, groupCategories } from './clustering';\nimport { correlation, cramersV, categoricalRegression } from './relations';\nimport './digestable.css';\n\nexport const digestable = () => {\n      // The table\n  let table = d3.select(),   \n      linkSvg = d3.select(),  \n\n      // Data   \n      allData = [],\n      data = [],\n      columns = [],\n      relations = [],\n      clustering = false,\n      \n      // Parameters\n      applySimplification = false,\n      simplificationMethod = 'threshold',\n      simplificationAmount = 0.9,\n      simplificationRows = 20,\n      transformBase = 1,\n      visualizationMode = 'text',\n      showLinks = false,\n      categoryScaling = 'row',\n\n      paddingX = 5,\n      paddingY = 0,\n\n      // Missing data\n      missingValues = ['', 'NA', 'na'],\n      isMissing = d => missingValues.includes(d),\n\n      // Event dispatcher\n      dispatcher = d3.dispatch('clusterByColumn');\n\n  function digestable(selection) {\n    selection.each(function(d) {\n      // Create SVG for links\n      linkSvg = d3.select(this).selectAll('.linkSvg')\n        .data([[]])\n        .join(enter => enter.append('svg').attr('class', 'linkSvg'));\n\n      // Create skeletal table\n      table = d3.select(this).selectAll('table')\n        .data([[]])\n        .join(\n          enter => {\n            const table = enter.append('table');\n\n            table.append('thead').append('tr');\n            table.append('tbody');\n\n            return table;\n          }\n        );\n\n      createColumns(d);      \n      createData(d);\n      processData();\n      sortTable();\n      drawTable();\n    });\n  }\n\n  // Helper functions \n  const textVisibility = () => (visualizationMode === 'text' || visualizationMode === 'both') ? 'visible' : 'hidden';\n  const visVisibility = () => visualizationMode !== 'text' ? 'visible' : 'hidden';\n\n  const getCounts = (uniqueValues, values) => Object.entries(values.reduce((counts, value) => {\n    counts[value]++;\n    return counts;\n  }, uniqueValues.reduce((counts, value) => {\n    counts[value] = 0;\n    return counts;\n  }, {}))).map(([key, value]) => ({ value: key, count: value })).sort((a, b) => d3.descending(a.count, b.count));\n\n  const significantDigits = n => {\n    const log10 = Math.log(10);\n\n    // Split decimal\n    let [n1, n2] = String(n).split('.');\n\n    // Handle left of decimal\n    n1 = Math.abs(n1);\n    const d1 = Math.floor(Math.log(n) / log10) + 1;\n\n    // Handle right of decimal\n    const d2 = n2 ? (n1 > 0 ? n2.length : Math.floor(Math.log(+n) / log10) + 1) : 0;\n\n    return Math.max(d1 + d2, 1);\n  };\n\n  function clearSorting() {     \n    columns.forEach(d => d.sort = null);\n  }\n\n  function clearClustering() {\n    columns.forEach(d => d.cluster = null);\n  }\n\n  function createColumns(inputData) {\n    columns = inputData.columns.map(d => ({ name: d }));\n\n    // Determine column types and set column info\n    columns.forEach(column => {\n      const { name } = column;\n      const values = inputData.map(d => d[name]);\n      const uniqueValues = Array.from(values.reduce((values, d) => values.add(d), new Set()));\n      const validValues = uniqueValues.filter(value => !isMissing(value));\n      const numeric = validValues.reduce((numeric, value) => numeric && !isNaN(value), true);\n\n      column.uniqueValues = uniqueValues;\n\n      if (numeric) {        \n        const numbers = validValues.map(d => +d);\n\n        if (numbers.length === inputData.length) {\n          // Heuristic to check for integer ID type\n          numbers.sort((a, b) => d3.ascending(a, b));\n\n          const isId = numbers.reduce((isId, d, i, a) => isId && (i === 0 || d === a[i - 1] + 1), true);\n\n          column.type = isId ? 'id' : 'numeric';\n        }\n        else if (numbers.length === 2 && numbers.includes(0) && numbers.includes(1)) {\n          // Treat binary as categorical\n          column.type = 'categorical';\n        }\n        else {\n          column.type = 'numeric';            \n        }\n\n        if (column.type === 'numeric') {\n          column.values = numbers;\n          column.extent = d3.extent(numbers);\n          column.maxDigits = d3.max(numbers, significantDigits);\n        }\n        else if (column.type === 'categorical') {\n          column.type = 'categorical';        \n          column.counts = getCounts(uniqueValues, values);\n        }\n      }\n      else if (uniqueValues.length === inputData.length) {\n        column.type = 'id';        \n      }\n      else {\n        column.type = 'categorical';        \n        column.counts = getCounts(uniqueValues, values);\n      }\n    });\n\n    clearSorting();\n    clearClustering();\n  }\n\n  function createData(inputData) {\n    allData = inputData.map((d, i) => {\n      const v = {...d};\n\n      // Convert missing and numeric data\n      columns.forEach(({ type, name }) => {\n        const value = v[name];\n\n        if (isMissing(value)) {\n          v[name] = null;\n        }\n        else if (type === 'numeric') {\n          v[name] = +value;\n        }\n      });\n\n      return {\n        initialIndex: i,\n        isCluster: false,\n        cluster: null,\n        pinned: false,        \n        expanded: false,\n        values: v\n      };\n    });\n  }\n\n  function computeRelations() {\n    // Compute relations\n    relations = columns.reduce((relations, column1, i, a) => {\n      const v1 = allData.map(d => d.values[column1.name]);\n\n      for (let j = i + 1; j < a.length; j++) {\n        const column2 = a[j];\n        const v2 = allData.map(d => d.values[column2.name]);\n\n        const value = column1.type === 'id' || column2.type === 'id' ? 0 :\n          column1.type === 'categorical' && column2.type === 'categorical' ? cramersV(v1, v2) :\n          column1.type === 'categorical' && column2.type === 'numeric' ? categoricalRegression(v1, v2) :\n          column1.type === 'numeric' && column2.type === 'categorical' ? categoricalRegression(v2, v1) :\n          correlation(v1, v2);\n\n        relations.push({\n          source: column1,\n          target: column2,\n          value: value,\n          magnitude: Math.abs(value)\n        });\n      }\n\n      return relations;\n    }, []);\n\n    relations.sort((a, b) => d3.ascending(a.magnitude, b.magnitude));\n  }\n\n  function sortByColumn(column) {    \n    const sort = column.sort === 'descending' ? 'ascending' : 'descending';\n    \n    clearSorting();\n\n    column.sort = sort;\n  }\n\n  function clusterByColumn(column) {    \n    const cluster = column.cluster === null ? 'descending' :\n      column.cluster === 'descending' ? 'ascending' :\n      null;\n    \n    clearClustering();\n    clearSorting();\n\n    column.cluster = cluster;\n  }\n\n  function sortData() {\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    const sort = clusterColumn ? clusterColumn.cluster : 'ascending';\n\n    allData.sort((a, b) => {\n      const v1 = clusterColumn ? a.values[clusterColumn.name] : a.initialIndex;\n      const v2 = clusterColumn ? b.values[clusterColumn.name] : b.initialIndex;\n\n      return v1 === v2 ? 0 : v1 === null ? 1 : v2 === null ? -1 : d3[sort](v1, v2);\n    });\n  }\n\n  function processData() {\n    sortData();\n\n    // Clear expanded\n    allData.forEach(d => d.expanded = false);\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    // Initialize categorical and id column counts\n    columns.filter(({ type }) => type !== 'numeric').forEach(column => column.maxCount = 1);\n\n    clustering = applySimplification && clusterColumn && clusterColumn.type !== 'id';\n\n    if (clustering) {\n      const { name, type, cluster: sort } = clusterColumn;\n\n      const values = allData.map(d => d.values[name]);\n\n      const clusters = (type === 'numeric' ? clusterNumeric(values, sort) : clusterCategorical(values))\n        .filter(cluster => cluster.length > 0);\n\n      data = clusters.map(cluster => {\n        const size = cluster.length;\n\n        // No cluster if only 1\n        if (size === 1) {\n          allData[cluster[0]].cluster = null;\n\n          return allData[cluster[0]];\n        }\n\n        // Create row object\n        const row = {\n          isCluster: true,\n          indeces: cluster,\n          size: size,\n          values: {}\n        };\n\n        // Set cluster object for each item\n        cluster.forEach(i => allData[i].cluster = row);        \n\n        // Compute info based on column type\n        columns.forEach(column => {\n          const { name, type, uniqueValues } = column;\n\n          if (type === 'numeric') {\n            const values = cluster.map(i => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const validValues = values.filter(d => d !== null);\n\n              row.values[name] = validValues.length > 0 ?\n                {\n                  valid: true,\n                  values: values,\n                  validValues: validValues,\n                  min: d3.min(validValues),\n                  max: d3.max(validValues),                    \n                  median: d3.median(validValues),\n                  q1: d3.quantile(validValues, 0.25),\n                  q2: d3.quantile(validValues, 0.75)\n                } :\n                {\n                  valid: false,\n                  values: values\n                };\n            }\n            else {\n              row.values[name] = null;\n            }\n          }\n          else {\n            const values = cluster.map(i => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = getCounts(uniqueValues, values);\n              \n              column.maxCount = Math.max(column.maxCount, counts[0].count);\n\n              row.values[name] = {\n                counts: counts\n              };\n            }\n            else {\n              row.values[name] = null;\n            }\n          }\n        });\n\n        return row;\n      });\n    }\n    else {\n      data = [...allData];\n    }\n\n    function clusterNumeric(values, sort) {     \n      const transformValues = values => {\n        const base = sort === 'ascending' ? 1 / transformBase : transformBase;\n        \n        const valueScale = d3.scaleLinear()\n          .domain(d3.extent(values))\n          .range([0, 1]);\n  \n        return values.map(d => Math.pow(valueScale(d), base));\n      };\n\n      const removeNull = values => {\n        // Find first null. Always sorted to the end.\n        const nullIndex = values.indexOf(null);      \n        const nullCluster = nullIndex > -1 ? d3.range(nullIndex, values.length) : null;\n        const validValues = nullIndex > -1 ? values.slice(0, nullIndex) : values;\n        const rows = nullCluster ? simplificationRows - 1 : simplificationRows;\n\n        return [validValues, nullCluster, rows];\n      }\n\n      const applyNull = (clusters, nullCluster) => {\n        return nullCluster ? clusters.concat([nullCluster]) : clusters;\n      };\n\n      switch (simplificationMethod) {\n        case 'quantiles': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterQuantiles(validValues, rows);\n          if (sort === 'descending') clusters.reverse();\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        case 'kmeans': { \n          const [validValues, nullCluster, rows] = removeNull(values);\n          const { clusters } = kmeans(validValues.map(d => [d]), rows);\n          clusters.sort((a, b) => d3[sort](a.centroid[0], b.centroid[0]));\n\n          return applyNull(clusters.map(cluster => cluster.indeces), nullCluster);\n        }\n\n        case 'gap': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterGap(transformValues(validValues), rows);\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        default:\n          console.log(`Unknown simplification method: ${ simplificationMethod }`);\n      }\n    }\n\n    function clusterCategorical(values) {\n      return groupCategories(values);\n    }\n  }\n\n  function sortTable() {\n    const sortColumn = columns.find(({ sort }) => sort !== null);\n\n    if (!sortColumn) return;\n\n    const { name, type, sort } = sortColumn;\n\n    data.sort((a, b) => {\n      switch (type) {\n        case 'numeric': {\n          const v1 = a.isCluster ? a.values[name].median : a.values[name];\n          const v2 = b.isCluster ? b.values[name].median : b.values[name];\n      \n          return v1 === v2 ? 0 : v1 === null ? 1 : v2 === null ? -1 : d3[sort](v1, v2);\n        }\n\n        case 'categorical': {\n          const v1 = a.isCluster ? a.values[name].counts[0].count / a.size : a.values[name];\n          const v2 = b.isCluster ? b.values[name].counts[0].count / b.size : b.values[name];\n      \n          return v1 === v2 ? 0 : v1 === null ? 1 : v2 === null ? -1 : d3[sort](v1, v2);\n        }\n\n        case 'id': {\n          const v1 = a.isCluster ? a.values[name].counts[0].value : a.values[name];\n          const v2 = b.isCluster ? b.values[name].counts[0].value : b.values[name];\n      \n          return v1 === v2 ? 0 : v1 === null ? 1 : v2 === null ? -1 : d3[sort](v1, v2);\n        }\n\n        default: \n          console.log(`Unknown column type ${ type }`);\n          return 0;\n      }\n    });\n  }\n\n  function drawTable() {\n    const px = paddingX + 'px';\n    const py = paddingY + 'px';\n\n    const clusterIcon = cluster => (\n      cluster === 'ascending' ? '⊻' :\n      cluster === 'descending' ? '⊼' :\n      '≡'\n      //cluster === 'ascending' ? '⇟' :\n      //cluster === 'descending' ? '⇞' :\n      //'≡'\n    );\n\n    const sortIcon = sort => sort === 'ascending' ? '⇣' : '⇡';    \n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n    const showSortButtons = applySimplification && clusterColumn && clusterColumn.type === 'categorical';\n\n    // Reset svg widths for proper column width sizing\n    table.selectAll('svg').attr('width', 0);\n\n    drawHeader();\n    drawBody();\n    applyVisualizationMode();\n    highlight();\n    drawLinks();\n\n    function drawHeader() {\n      const info = column => {\n        switch (column.type) {\n          case 'numeric': {\n            // Display range and median for clusters\n            const min = column.extent[0];\n            const max = column.extent[1];\n\n            return min === max ? min :\n              `<div class='range'><div>${ min }</div><div class='dash'><hr /></div><div>${ max }</div>`;    \n          }\n          \n          case 'categorical': {\n            return `<div>${ column.uniqueValues.length } categories</div>`;\n          }\n\n          case 'id': {\n            return `<div>${ column.uniqueValues.length } unique values<div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Header elements\n      const th = table.select('thead').select('tr').selectAll('th')\n        .data(columns, d => d.name)\n        .join(\n          enter => {\n            const th = enter.append('th');\n\n            const div = th.append('div')\n              .attr('class', 'headerDiv');\n\n            const nameDiv = div.append('div')\n              .attr('class', 'nameDiv');\n            \n            nameDiv.append('div')                \n              .text(d => d.name);\n                      \n            nameDiv.append('button')\n              .attr('class', 'headerButton sortButton')\n              .on('click', (evt, d) => {\n                sortByColumn(d);\n                sortTable();\n                drawTable();\n              });\n            \n            nameDiv.append('button')\n              .attr('class', 'headerButton clusterButton')\n              .style('font-weight', 'bold')\n              .on('click', (evt, d) => {\n                clusterByColumn(d);\n                processData();\n                sortTable();\n                drawTable();\n\n                dispatcher.call('clusterByColumn', this, d);\n              });\n\n            div.append('div')\n              .attr('class', 'info')\n              .html(info);\n\n            div.each(function(column) {\n              d3.select(this).selectAll('.visDiv')\n                .data(column.type === 'id' ? [] : [column])\n                .join(\n                  enter => {\n                    const div = enter.append('div')\n                      .attr('class', 'visDiv');\n\n                    div.append('svg');\n\n                    return div;\n                  }\n                )\n            });\n\n            th.append('div')\n              .attr('class', 'highlight');\n\n            return th;\n          }\n        )\n        .classed('active', d => d.cluster !== null)\n        .style('padding-left', px)\n        .style('padding-right', px)\n        .style('padding-top', py)\n        .style('padding-bottom', py);\n\n      // Update buttons\n      th.select('.clusterButton')\n        .classed('active', d => d.cluster !== null)\n        .text(d => clusterIcon(d.cluster));\n\n      th.select('.sortButton')\n        .classed('active', d => d.sort !== null)\n        .style('visibility', d => d.cluster === null && showSortButtons ? null : 'hidden')\n        .text(d => sortIcon(d.sort));\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table.select('thead').selectAll('tr')\n        .each(function() {\n          d3.select(this).selectAll('th')      \n            .each(function(column) {\n              const width = d3.select(this).select('.nameDiv').node().clientWidth;\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric': {\n                  const svg = d3.select(this).select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const xScale = d3.scaleLinear()\n                    .domain(column.extent)\n                    .rangeRound([0, width]);\n\n                  const bin = d3.bin()\n                    .domain(xScale.domain());\n\n                  const bins = bin(column.values);                    \n\n                  const yScale = d3.scaleLinear()\n                    .domain([0, d3.max(bins, d => d.length)])\n                    .range([height, 0]);\n\n                  // Histogram\n                  svg.selectAll('rect')\n                    .data(bins)\n                    .join(\n                      enter => {\n                        const rect = enter.append('rect')\n                          .style('fill', '#aaa');\n\n                        rect.append('title');\n\n                        return rect;\n                      }\n                    )\n                    .attr('x', d => xScale(d.x0))\n                    .attr('y', d => yScale(d.length))\n                    .attr('width', d => xScale(d.x1) - xScale(d.x0) - 1)\n                    .attr('height', d => yScale(0) - yScale(d.length))\n                    .select('title').text(d => `${d.x0}-${d.x1}: ${d.length}`);\n\n                  break;\n                }\n\n                case 'categorical': {\n                  const svg = d3.select(this).select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const colorScale = d3.scaleOrdinal()\n                      .domain(column.uniqueValues)\n                      .range(d3.schemeTableau10);\n\n                  const xScale = d3.scaleBand()\n                    .domain(column.uniqueValues)\n                    .range([0, width]);\n\n                  const yScale = d3.scaleLinear()\n                    .domain([0, d3.max(column.counts, d => d.count)])\n                    .range([height, 0]);\n\n                  // Bars\n                  svg.selectAll('rect')\n                    .data(column.counts)\n                    .join(\n                      enter => {\n                        const rect = enter.append('rect');\n                        rect.append('title');\n                        return rect;\n                      }\n                    )\n                    .attr('x', d => xScale(d.value))\n                    .attr('y', d => yScale(d.count))\n                    .attr('width', xScale.bandwidth())\n                    .attr('height', d => yScale(0) - yScale(d.count))\n                    .attr('fill', d => colorScale(d.value))\n                    .select('title').text(d => `${ d.value }: ${ d.count }`);\n\n                  break;\n                }\n\n                case 'id':\n                  d3.select(this).select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n\n                default:\n                  console.log(`Unknown column type ${ column.type }`);\n              }\n            }); \n        });\n    };\n\n    function drawBody() {\n      const text = (type, v, isCluster, maxDigits) => {\n        switch (type) {\n          case 'numeric': {\n            if (v !== null && isCluster && v.valid) {\n              // Display range and median for clusters\n              const median = d3.format(`.${ maxDigits }r`)(v.median);\n\n              return v.min === v.max ? median :\n                `<div class='range'><div class='extrema'>${ v.min }</div><div>${ median }</div><div class='extrema'>${ v.max }<div>`;\n            }\n            else {\n              return v === null || isCluster ? '' : v;\n            }\n          }\n          \n          case 'categorical': {\n            if (v !== null && isCluster) {\n              // Display top category and number of other categories\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter(d => d.count > 0);\n              const s = others.map(d => `${ d.value } (${ d.count })`).join(', ');\n\n              const topString = `<div>${ top.value }` +\n                (top.count > 1 ? ` (${ top.count })</div>` : '<div>');\n\n              const othersString = others.length === 1 ? `<div class='others' title=\"${ s }\">and 1 other category</div>` :\n                others.length > 1 ? `<div class='others' title=\"${ s }\">and ${ others.length } other categories</div>` : '';\n\n              return `<div class='categories'>${ topString }${ othersString }</div>`;\n            }\n            else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'id': {\n            if (v !== null && isCluster) {\n              // Display first id and number of other ids\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter(d => d.count > 0);\n              const s = others.map(d => d.value).join(', ');\n\n              const topString = `<div>${ top.value }<div>`;\n\n              const othersString = others.length === 1 ? `<div class='others' title=\"${ s }\">and 1 other</div>` :\n                others.length > 1 ? `<div class='others' title=\"${ s }\">and ${ others.length } others</div>` : '';\n\n              return `<div class='categories'>${ topString }${ othersString }</div>`;\n            }\n            else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'cluster': {\n            return `<div class='clusterSize'>n = ${ v }</div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Insert pinned and expanded rows\n      const expandedData = [];\n\n      const sortColumn = columns.find(({ sort }) => sort !== null);\n      const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n\n      data.forEach(row => {\n        expandedData.push(row);\n\n        if (row.isCluster) {\n          const insert = row.indeces.map(i => allData[i]).filter(d => d.pinned || d.expanded);\n\n          const name = sortColumn ? sortColumn.name : clusterColumn.name;\n          const sort = sortColumn ? sortColumn.sort : clusterColumn.cluster;\n\n          insert.sort((a, b) => {\n            const v1 = a.values[name];\n            const v2 = b.values[name];\n\n            return v1 === null && v2 === null ? 0 : v1 === null ? 1 : v2 === null ? -1 : d3[sort](v1, v2);\n          });\n\n          expandedData.push(...insert);\n        }\n      });\n\n      const maxSize = d3.max(data, d => d.isCluster ? d.size : 1);\n\n      table.select('tbody').selectAll('tr')\n        .data(expandedData)\n        .join('tr')\n        //.style('cursor', d => d.isCluster ? allData[d.indeces[0]].expanded ? 'zoom-out' : 'zoom-in': 'pointer')\n        .style('cursor', 'pointer')\n        .each(function(d) {\n          d3.select(this).selectAll('td')\n            .data(columns, d => d.name)\n            .join(\n              enter => {\n                const td = enter.append('td');\n                \n                const div = td.append('div') \n                  .attr('class', 'cellDiv');\n\n                const valueDiv = div.append('div')\n                  .attr('class', 'valueDiv');\n\n                valueDiv.append('div')\n                  .attr('class', 'textDiv')\n                  .classed('notId', d => d.type !== 'id')\n                  .style('text-align', d => d.type === 'numeric' ? 'center' : 'left');\n\n                valueDiv.append('div')\n                  .attr('class', 'visDiv');\n\n                return td;\n              }\n            )\n            .classed('active', d => d.cluster !== null)\n            .style('padding-left', px)\n            .style('padding-right', px)\n            .style('padding-top', py)\n            .style('padding-bottom', py)\n            .each(function(column) {\n              // Text\n              const v = d.values[column.name];\n\n              const td = d3.select(this)\n                .classed('expanded', d.expanded)\n                .classed('pinned', d.pinned)\n\n              td.select('.valueDiv .textDiv')\n                .html(text(column.type, v, d.isCluster, column.maxDigits));\n\n              td.select('.cellDiv').selectAll('.clusterDiv')\n                .data(clustering && column.cluster !== null ? [v] : [])\n                .join(\n                  enter => {\n                    const div = enter.append('div')\n                      .attr('class', 'clusterDiv');\n\n                    div.append('div')\n                      .attr('class', 'textDiv notId');\n    \n                    div.append('div')\n                      .attr('class', 'visDiv');\n\n                    return div;\n                  }\n                )\n                .select('.textDiv')\n                .html(d.expanded ? '' : text('cluster', d.isCluster ? d.size : 1));\n            })\n        });\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table.select('tbody').selectAll('tr')\n        .each(function(d, i) {\n          d3.select(this).selectAll('td')      \n            .each(function(column) {\n              // Get column width\n              if (i === 0) {\n                column.width = d3.select(this).select('.valueDiv').node().clientWidth;\n              }\n\n              const v = d.values[column.name];\n\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric':\n                  d3.select(this).select('.valueDiv .visDiv').selectAll('svg')\n                    .data(v === null || (d.isCluster && !v.valid) ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {                    \n                      const svg = d3.select(this);\n\n                      const height = 6;\n                      const y = height / 2;\n                      const r = height / 2;\n                      const w1 = r;\n                      const w2 = Math.max(Math.floor(w1 / 2), 1);\n    \n                      const colorScale = d3.scaleLinear()\n                          .domain([column.extent[0], (column.extent[0] + column.extent[1]) / 2, column.extent[1]])\n                          .range(['#2171b5', '#999', '#cb181d']);\n    \n                      const xScale = d3.scaleLinear()\n                        .domain(column.extent)\n                        .range([r, column.width - r]);\n\n                      // Quartile line\n                      svg.selectAll('line')\n                        .data(d.isCluster ? [[v.min, v.max, v.median], [v.q1, v.q2, v.median]] : [])\n                        .join(\n                          enter => enter.append('line')\n                            .style('margin', 0)\n                            .style('padding', 0)\n                            .style('stroke-linecap', 'round')                         \n                        )\n                        .attr('x1', d => xScale(d[0]))\n                        .attr('y1', y)\n                        .attr('x2', d => xScale(d[1]))\n                        .attr('y2', y)\n                        .style('stroke', d => colorScale(d[2]))\n                        .style('stroke-width', (d, i) => i === 0 ? w2 : w1);\n\n                      // Median\n                      svg.selectAll('circle')\n                        .data(d.isCluster ? [v.median] : [v])\n                        .join('circle')\n                        .attr('cx', d => xScale(d))\n                        .attr('cy', y)\n                        .attr('r', r)\n                        .style('fill', d => colorScale(d));\n                    });  \n\n                  break;\n\n                case 'categorical':\n                  d3.select(this).select('.valueDiv .visDiv').selectAll('svg')\n                    .data(v === null ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {  \n                      const svg = d3.select(this);\n\n                      const height = 10;\n\n                      const counts = v.counts ? v.counts : [{ value: v, count : 1 }];\n\n                      const colorScale = d3.scaleOrdinal()\n                          .domain(column.uniqueValues)\n                          .range(d3.schemeTableau10);\n\n                      const xScale = d3.scaleBand()\n                        .domain(column.uniqueValues)\n                        .range([0, column.width]);\n\n                      const yScale = d3.scaleLinear()\n                        .domain(categoryScaling === 'row' ? [0, d3.max(counts, d => d.count)] : [0, column.maxCount])\n                        .range([height, 0]);\n\n                      // Bars\n                      svg.selectAll('rect')\n                        .data(counts)\n                        .join(\n                          enter => {\n                            const rect = enter.append('rect');\n                            rect.append('title');\n                            return rect;\n                          }\n                        )\n                        .attr('x', d => xScale(d.value))\n                        .attr('y', d => yScale(d.count))\n                        .attr('width', xScale.bandwidth())\n                        .attr('height', d => yScale(0) - yScale(d.count))\n                        .attr('fill', d => colorScale(d.value))\n                        .select('title').text(d => `${ d.value }: ${ d.count }`);\n                    });                  \n\n                  break;\n                \n                case 'id':\n                  break;\n\n                  default:\n                    console.log(`Unknown column type ${ column.type }`);\n              }\n\n              // Cluster size\n              const clusterWidth = 30;\n\n              d3.select(this).select('.clusterDiv .visDiv').selectAll('svg')\n                .data([d])\n                .join('svg')\n                .attr('width', clusterWidth)\n                .attr('height', height)\n                .each(function(d) {  \n                  const svg = d3.select(this);\n\n                  const height = 5;\n\n                  const size = d.isCluster ? d.size : 1;\n\n                  const xScale = d3.scaleLinear()\n                    .domain([0, maxSize])\n                    .range([0, clusterWidth]);\n\n                  // Bar\n                  svg.selectAll('rect')\n                    .data(d.expanded ? [] : [d])\n                    .join('rect')\n                    .attr('width', xScale(size))\n                    .attr('height', height)\n                    .attr('fill', '#bbb');\n                });           \n            })\n            .on('mouseover', function(evt, column) {\n              table.selectAll('th').filter(d => d === column).select('.highlight')\n                .style('visibility', null);  \n\n              if (visualizationMode === 'interactive') {\n                table.selectAll('td').filter(d => d === column || d.cluster !== null).selectAll('.textDiv.notId')\n                  .style('visibility', null);\n              }\n\n              linkSvg.selectAll('path')\n                .style('visibility', d => d.source === column || d.target === column ? null : 'hidden');\n            })\n            .on('mouseout', function(evt, column) {\n              table.selectAll('th').filter(d => d === column).select('.highlight')\n                .style('visibility', d => d.cluster !== null ? null : 'hidden'); \n                \n              if (visualizationMode === 'interactive') {\n                table.selectAll('td').filter(d => d === column || d.cluster !== null).selectAll('.textDiv.notId')\n                  .style('visibility', 'hidden');\n              }\n\n              linkSvg.selectAll('path')\n                .style('visibility', null);\n            });\n        })\n        .on('mouseover', function(evt, row) {         \n          table.select('tbody').selectAll('tr').filter(d => d === row).selectAll('td')\n            .classed('mouseOver', true);\n        })\n        .on('mouseout', function(evt, row) {\n          table.select('tbody').selectAll('tr').filter(d => d === row).selectAll('td')\n            .classed('mouseOver', false);\n        })\n        .on('click', function(evt, row) {\n          if (row.isCluster) {\n            row.indeces.forEach(i => {\n              allData[i].expanded = !allData[i].expanded;\n            });\n\n            drawTable();\n          }\n          else {\n            row.pinned = !row.pinned\n\n            if (row.pinned) {\n              // Already shown\n              d3.select(this).selectAll('td')\n                .classed('pinned', true);\n            }\n            else {\n              // Need to hide\n              drawTable();\n            }\n          }\n        });   \n    }\n\n    function highlight() {\n      // Update border\n      const height = table.node() ? table.node().clientHeight - 4 : 0;\n\n      table.selectAll('th').select('.highlight')\n        .style('height', `${ height }px`)\n        .style('visibility', d => d.cluster !== null ? null : 'hidden');\n    }\n  } \n\n  function drawLinks() {\n    if (!table.node()) return;\n\n    if (relations.length === 0) {\n      computeRelations();\n    }\n\n    linkSvg.style('display', showLinks ? null : 'none');\n    if (!showLinks) return;\n\n    const width = table.node().offsetWidth;\n    const height = 200;\n    const aspect = width / height;\n\n    const offset = table.node().getBoundingClientRect().x;\n\n    table.selectAll('th').nodes().forEach((d, i) => {\n      const { left, right } = d.getBoundingClientRect();\n\n      columns[i].pos = left + (right - left) / 2 - offset;\n    });\n\n    relations.forEach(d => {\n      const x1 = d.source.pos;\n      const x2 = d.target.pos;\n\n      const y = height - (x2 - x1) / aspect;\n\n      const xi = d3.interpolateNumber(x1, x2);\n      const yi = d3.interpolateNumber(height, y);\n\n      d.points = [\n        { x: xi(0), y: yi(0) },\n        { x: xi(0.1), y: yi(0.5) },\n        { x: xi(0.5), y: yi(1) },\n        { x: xi(0.9), y: yi(0.5) },\n        { x: xi(1), y: yi(0) }\n      ];\n    });\n\n    const line = d3.line()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(d3.curveBasis);\n\n    const colorScale = d3.scaleSequential(d3.interpolateRdBu)\n      .domain([1, -1]);\n\n    const opacityScale = d3.scaleLinear()\n      .domain([0, 1])\n      .range([0, 1]);\n\n    const widthScale = d3.scaleLinear()\n      .domain([0, 1])\n      .range([0, 5]);\n\n    linkSvg\n      .attr('width', width)\n      .attr('height', height)\n      .selectAll('path')\n      .data(relations)\n      .join('path')\n      .attr('d', d => line(d.points))\n      .style('fill', 'none')\n      .style('stroke', d => colorScale(d.value))\n      .style('stroke-opacity', d => opacityScale(d.magnitude) )\n      .style('stroke-width', d => widthScale(d.magnitude))\n      .style('stroke-linecap', 'round')\n      .append('title').text(d => d.value);\n  }\n\n  function applyVisualizationMode() {\n    const td = table.selectAll('td');\n    td.selectAll('.textDiv.notId').style('visibility', textVisibility());\n    td.selectAll('svg').style('visibility', visVisibility());\n  }\n\n  digestable.applySimplification = function(_) {\n    if (!arguments.length) return applySimplification;\n    applySimplification = _; \n    const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n    if (clusterColumn && clusterColumn.type !== 'id') {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationMethod = function(_) {\n    if (!arguments.length) return simplificationMethod;\n    simplificationMethod = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationAmount = function(_) {\n    if (!arguments.length) return simplificationAmount;\n    simplificationAmount = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationRows = function(_) {\n    if (!arguments.length) return simplificationRows;\n    simplificationRows = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.transformBase = function(_) {\n    if (!arguments.length) return transformBase;\n    transformBase = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.visualizationMode = function(_) {\n    if (!arguments.length) return visualizationMode;\n    visualizationMode = _;\n    applyVisualizationMode();\n    return digestable;\n  };\n\n  digestable.showLinks = function(_) {\n    if (!arguments.length) return showLinks;\n    showLinks = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.categoryScaling = function(_) {\n    if (!arguments.length) return categoryScaling;\n    categoryScaling = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.updateLinks = function() {\n    drawLinks();\n    return digestable;\n  };\n\n  // For registering event callbacks\n  digestable.on = function() {\n    const value = dispatcher.on.apply(dispatcher, arguments);\n    return value === dispatcher ? digestable : value;\n  };\n\n  return digestable;\n};","import * as d3 from 'd3';\n\nexport const clusterQuantiles = (values, n) => {\n  const range = d3.range(n);\n\n  const scale = d3.scaleQuantile()\n    .domain(values)\n    .range(range);\n\n  return values.reduce((clusters, value, i) => {\n    clusters[scale(value)].push(i);\n    return clusters;\n  }, range.map(() => []));\n};","export const groupCategories = values => {\n  return values.reduce((clusters, value, i, a) => {\n    if (i === 0) {\n      clusters.push([i]);\n    }\n    else {\n      if (value === a[i - 1]) {\n        clusters[clusters.length -1].push(i);\n      }\n      else {\n        clusters.push([i]);\n      }\n    }\n\n    return clusters;\n  }, []);\n}","import { useContext, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { SimplifyContext, VisualizationContext } from '../../contexts';\nimport { useScrollHook } from '../../hooks';\nimport { digestable } from '../../digestable';\n\nexport const TableWrapper = ({ data }) => {\n  const [{ apply, method, amount, rows, transformBase }, simplifyDispatch] = useContext(SimplifyContext);\n  const [{ mode, showLinks, categoryScaling }] = useContext(VisualizationContext);\n  const divRef = useRef();\n  const digestableRef = useRef();\n\n  // Scroll callback\n  const onScroll = useScrollHook(() => {\n    if (digestableRef.current) {\n      digestableRef.current.updateLinks();\n    }\n  }, divRef, 'horizontal');\n\n  // Create visualization\n  useEffect(() => {\n    if (!digestableRef.current) {\n      digestableRef.current = digestable()\n        .applySimplification(apply)        \n        .simplificationMethod(method.name)      \n        .simplificationAmount(amount)\n        .simplificationRows(rows)\n        .transformBase(transformBase)\n        .visualizationMode(mode)\n        .categoryScaling(categoryScaling)\n        .on('clusterByColumn', column => {\n          simplifyDispatch({ \n            type: 'setColumnInfo', \n            columnType: column.type, \n            unique: column.uniqueValues.length \n          });\n        });\n    }\n  }, []);\n\n  // Update data\n  useEffect(() => {\n    d3.select(divRef.current)\n      .datum(data)\n      .call(digestableRef.current);\n  }, [data]);\n\n  // Simplify parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.applySimplification(apply);\n    }\n  }, [apply]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationMethod(method.name);\n    }\n  }, [method]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationAmount(amount);\n    }\n  }, [amount]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationRows(rows);\n    }\n  }, [rows]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.transformBase(transformBase);\n    }\n  }, [transformBase]);\n\n  // Visualization parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.visualizationMode(mode);\n    }\n  }, [mode]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.showLinks(showLinks);\n    }\n  }, [showLinks]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.categoryScaling(categoryScaling);\n    }\n  }, [categoryScaling]);\n\n  return (\n    <div \n      ref={ divRef }\n      style={{ \n        height: '100%',\n        overflow: 'auto'\n      }}\n      onScroll={ onScroll }\n    />\n  );\n};           ","import { useRef } from \"react\";\n\nexport const useScrollHook = (callback, divRef, scrollType) => {\n  const x = useRef(0);\n  const y = useRef(0); \n  const ticking = useRef(false); \n\n  return () => {\n    if (!divRef.current) return;\n\n    switch (scrollType) {\n      case 'horizontal': {\n        const left = divRef.current.scrollLeft;\n\n        if (left !== x.current) {\n          x.current = left;\n\n          if (!ticking.current) {\n            window.requestAnimationFrame(() => {\n              callback(left);\n    \n              ticking.current = false;\n            });\n    \n            ticking.current = true;\n          }\n        }\n      }\n      break;\n\n      case 'vertical': {\n        const top = divRef.current.scrollTop;\n\n        if (top !== y.current) {\n          y.current = top;\n\n          if (!ticking.current) {\n            window.requestAnimationFrame(() => {\n              callback(top);\n    \n              ticking.current = false;\n            });\n    \n            ticking.current = true;\n          }\n        }\n      }\n      break;\n\n      case 'both': {\n        const left = divRef.current.scrollLeft;\n        const top = divRef.current.scrollTop;\n\n        if (left !== x.current || top !== y.current) {\n          x.current = left;\n          y.current = top;\n\n          if (!ticking.current) {\n            window.requestAnimationFrame(() => {\n              callback(left, top);\n    \n              ticking.current = false;\n            });\n    \n            ticking.current = true;\n          }\n        }\n      }\n      break;\n\n      default:\n        console.log('Invalid scroll type');\n    }\n  }\n};","import { Card, Stack } from 'react-bootstrap';\n\nconst { Header, Body } = Card;\n\nexport const ControlPanel = ({ title, children }) => {\n  return (\n    <Card>\n      <Header>{ title }</Header>\n      <Body>\n        <Stack gap={ 3 }>\n          { children }\n        </Stack>\n      </Body>\n    </Card>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel } from 'react-bootstrap';\nimport { SimplifyContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Label, Check, Select, Range, Control } = Form;\n\nexport const SimplifyControls = () => {\n  const [\n    { apply, columnType, methods, method, amount, transformBase, unique, rows }, \n    simplifyDispatch\n  ] = useContext(SimplifyContext);\n\n  const onApplyChange = evt => {\n    simplifyDispatch({ type: 'setApply', apply: evt.target.checked });\n  };\n\n  const onMethodChange = evt => {\n    simplifyDispatch({ type: 'setMethod', method: methods.find(({ name }) => name === evt.target.value) });\n  };\n\n  const onAmountChange = evt => {\n    simplifyDispatch({ type: 'setAmount', amount: +evt.target.value / 100 });\n  };\n\n  const onRowsChange = evt => {\n    simplifyDispatch({ type: 'setRows', rows: +evt.target.value });\n  };\n\n  const onTransformBaseChange = evt => {\n    simplifyDispatch({ type: 'setTransformBase', transformBase: +evt.target.value / 100 });\n  };\n\n  return (\n    <ControlPanel title=\"Simplification\">\n      <Group>\n        <Check \n          type='checkbox' \n          label='Apply'\n          id='apply-simplification-checkbox'              \n          size='sm'\n          checked={ apply }\n          disabled={ columnType === 'id' }\n          onChange={ onApplyChange }\n        />\n      </Group>\n      <Group>\n        <FloatingLabel label=\"Method\">\n          <Select \n            value={ method.name }\n            disabled={ columnType !== 'numeric' }\n            onChange={ onMethodChange }\n          >\n            { methods.map(({ name }, i) => (\n                <option \n                  key={ i } \n                  value={ name }\n                >\n                  { name }\n                </option>\n              ))\n            }\n          </Select>\n        </FloatingLabel>\n      </Group>\n      { method.type === 'amount' ?\n        <Group>\n          <Label>Amount</Label>\n          <Range \n            min={ 0 }\n            max={ 100 }\n            step={ 1 }\n            value={ amount * 100 }\n            disabled={ columnType !== 'numeric' }\n            onChange={ onAmountChange }\n          />        \n        </Group>\n      :\n        <Group>\n          <Label >Number of rows</Label>\n          <Control\n            type='number'\n            min={ 1 }\n            max={ unique }\n            step={ 1 }\n            value={ rows }\n            disabled={ columnType !== 'numeric' }\n            onChange={ onRowsChange }\n          />        \n        </Group>\n      }\n      { method.transform && \n        <Group>\n          <Label>Depth weight</Label>\n          <Range \n            min={ 100 }\n            max={ 400 }\n            step={ 1 }\n            value={ transformBase * 100 }\n            onChange={ onTransformBaseChange }\n          />        \n        </Group>\n      }\n    </ControlPanel>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel } from 'react-bootstrap';\nimport { VisualizationContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Select, Check } = Form;\n\nexport const VisualizationControls = () => {\n  const [\n    { modes, mode, showLinks, categoryScalingOptions, categoryScaling }, \n    visualizationDispatch\n  ] = useContext(VisualizationContext);\n\n  const onModeChange = evt => {\n    visualizationDispatch({ type: 'setMode', mode: evt.target.value });\n  };\n\n  const onShowLinksChange = evt => {\n    visualizationDispatch({ type: 'setShowLinks', showLinks: evt.target.checked });\n  };\n\n  const onCategoryScalingChange = evt => {\n    visualizationDispatch({ type: 'setCategoryScaling', categoryScaling: evt.target.value });\n  };\n\n  return (\n    <ControlPanel title='Visualization'>\n      <Group>\n        <FloatingLabel label=\"Mode\">\n          <Select \n            value={ mode }\n            onChange={ onModeChange }\n          >\n            { modes.map((mode, i) => (\n                <option \n                  key={ i } \n                  value={ mode }\n                >\n                  { mode }\n                </option>\n              ))\n            }\n          </Select>\n        </FloatingLabel>\n      </Group>\n      <Group>\n        <Check \n          type='checkbox' \n          label='Show links'\n          id='show-links-checkbox'              \n          size='sm'\n          checked={ showLinks }\n          onChange={ onShowLinksChange }\n        />\n      </Group>\n      <Group>\n        <FloatingLabel label=\"Category scaling\">\n          <Select \n            value={ categoryScaling }\n            onChange={ onCategoryScalingChange }\n          >\n            { categoryScalingOptions.map((option, i) => (\n                <option \n                  key={ i } \n                  value={ option }\n                >\n                  { option }\n                </option>\n              ))\n            }\n          </Select>\n        </FloatingLabel>\n      </Group>\n    </ControlPanel>\n  );\n};\n","import { useState } from 'react';\nimport { Container, Navbar, Row, Col, Form, Spinner, Stack } from 'react-bootstrap';\nimport * as d3 from 'd3';\nimport { SimplifyProvider, VisualizationProvider } from './contexts';\nimport { TableWrapper } from './components/table-wrapper';\nimport { SimplifyControls, VisualizationControls } from './components/controls';\n\nconst { Brand } = Navbar;\nconst { Group, Control, Select } = Form;\n\nconst datasets = [\n  { name: 'MT Cars', url: 'data/mtcars.csv' },\n  { name: 'NFL Combine 2017', url: 'data/NFL Combine 2017.csv' }\n];\n\nexport const App = () => {\n  const [dataset, setDataset] = useState('');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // XXX: Add loading spinner\n  const loadData = async url => {\n    setData(null);\n    setLoading(true);\n\n    try {\n      const csvData = await d3.csv(url);\n\n      setData(csvData);\n      setLoading(false);\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  const onSelectChange = evt => {\n    const url = evt.target.value;\n    \n    setDataset(url);\n    loadData(url);\n  };\n\n  const onFileSelect = evt => {\n    const file = evt.target.files.length === 1 ? evt.target.files[0] : null;\n\n    if (file) {\n      setDataset('');\n      loadData(URL.createObjectURL(file));\n    }\n  };\n\n  return (\n    <SimplifyProvider>\n    <VisualizationProvider>\n      <Navbar bg='dark' variant='dark'>\n        <Brand className='ms-2'>\n          <img \n            src='/digestable_512.png' \n            alt='digestable logo'\n            height='32px'\n            className='me-1'              \n          />\n          <span className='text-align-bottom'>diges<b>table</b></span>\n        </Brand>        \n        <Form>\n          <Group as={ Row } className='align-items-center'>\n            <Col>\n              <Select \n                value={ dataset }\n                onChange={ onSelectChange }\n              >\n                <option\n                  value=''\n                  disabled\n                >\n                  Choose dataset\n                </option>\n                { datasets.map((dataset, i) => (\n                  <option key={ i } value={ dataset.url }>\n                    { dataset.name }\n                  </option> \n                ))}\n              </Select>\n            </Col>\n            <Col sm='auto' className='text-center'>\n              <span className='text-light'>or</span>\n            </Col>\n            <Col>\n              <Control \n                type='file'\n                accept='.csv'\n                onChange={ onFileSelect }\n              />\n            </Col>\n          </Group>\n        </Form>\n      </Navbar>\n      { data ? \n        <Container fluid style={{ height: 'calc(100% - 100px)' }}>      \n          <Row style={{ height: '100%' }}>\n            <Col xs={ 10 } className='mt-3' style={{ height: '100%'}}>\n              <TableWrapper data={ data } />\n            </Col>\n            <Col className='bg-dark'>\n              <Stack gap={ 3 }>\n                <SimplifyControls />\n                <VisualizationControls />\n              </Stack>\n            </Col>\n          </Row>\n        </Container>\n      :\n        <Container>\n          <div className='m-4 text-center'>\n            { loading ? \n              <>\n                <h5>Loading...</h5>\n                <Spinner animation='border' />\n              </>\n            : <h3>No data</h3> }\n          </div>\n        </Container>\n      }\n    </VisualizationProvider>\n    </SimplifyProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}